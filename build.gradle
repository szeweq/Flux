buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        maven { url = 'https://plugins.gradle.org/m2/' }
        maven { url = 'https://libraries.minecraft.net/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}

plugins {
    id('java')
    id('idea')
    id('maven-publish')
    id('szewek.mcgen.mcgen-plugin')
}

apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'com.matthewprenger.cursegradle'

group = 'szewek.flux'
archivesBaseName = 'flux'

String core_version = project.core_version

String mc_version = "1.16.5"
String jei_version = "7.6.1.74"
String top_version = "1.16-3.0.6-8"
String patchouli_version = "1.16.2-44"

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

idea {
    module {
        inheritOutputDirs = true
        for (String excludeDirName in ["run", "out", "logs", "gradle"]) {
            File excludeDir = new File(projectDir, excludeDirName)
            excludeDirs.add(excludeDir)
        }
    }
}
sourceSets {
    core { java { srcDir 'src/core/java' } }
    main { compileClasspath += sourceSets.core.output }
}
configurations {
    def extendImplementation = [coreImplementation]
    def extendCompileOnly = [coreCompileOnly]
    def extendRuntimeOnly = [coreRuntimeOnly]
    for (def c : extendImplementation) c.extendsFrom(implementation)
    for (def co : extendCompileOnly) co.extendsFrom(compileOnly)
    for (def ro : extendRuntimeOnly) ro.extendsFrom(runtimeOnly)
}

repositories {
    mavenCentral()
    maven {
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven { url 'https://maven.blamejared.com' }
    maven { url 'https://maven.tterrag.com/' }
    maven { url 'https://maven.latmod.com/' }
    maven { url = 'https://maven.minecraftforge.net/' }
    maven { url = 'https://libraries.minecraft.net/' }
    flatDir {
        dirs "libs"
    }
}

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'official', version: mappings_version
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                flux { source sourceSets.main }
                fl { source sourceSets.core }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            mods {
                flux { source sourceSets.main }
                fl { source sourceSets.core }
            }
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property('modVersion', project.version)
    from (sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'modVersion': project.version
    }
    from (sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}
processCoreResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
    inputs.property('coreVersion', core_version)
    from (sourceSets.core.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'coreVersion': core_version
    }
    from (sourceSets.core.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$mc_version-$forge_version"

    compileOnly "mezz.jei:jei-1.16.4:${jei_version}:api"
    //compileOnly "com.feed_the_beast.mods:ftb-gui-library:1.0.0.18" // FOR JEI

    //compileOnly fg.deobf("mezz.jei:jei-1.16.3:${jei_version}:api")
    //compileOnly fg.deobf("com.feed_the_beast.mods:ftb-gui-library:1.0.0.18") // FOR JEI
    runtimeOnly fg.deobf("mezz.jei:jei-1.16.4:${jei_version}")

    implementation fg.deobf("mcjty.theoneprobe:TheOneProbe-1.16:${top_version}")

    //compileOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}:api")
    //runtimeOnly fg.deobf("vazkii.patchouli:Patchouli:${patchouli_version}")

    // Jar from "libs" folder
    //runtimeOnly fg.deobf("mekanism:Mekanism-1.16.1:10.0.8.431")

    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'
}

jar {
    archiveAppendix.set("machinery")
    manifest {
        attributes([
            "Specification-Title": "flux",
            "Specification-Vendor": "Szewek",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": "Flux",
            "Implementation-Version": "${project.version}",
            "Implementation-Vendor" :"Szewek",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task coreJar(type: Jar) {
    archiveAppendix.set("lib")
    archiveVersion.set(core_version)
    from sourceSets.core.output
}
task coreSourcesJar(type: Jar) {
    archiveAppendix.set("lib")
    archiveVersion.set(core_version)
    archiveClassifier.set("sources")
    from sourceSets.core.java.srcDirs
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

artifacts {
    archives coreJar
    archives coreSourcesJar
}

reobf {
    coreJar {} // classpath = sourceSets.core.compileClasspath }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

curseforge {
    apiKey = project.hasProperty("cfKey") ? project.cfKey : ""
    project { // Flux
        id = "248942"
        releaseType = project.versionType
        changelogType = "markdown"
        changelog = file("latest.md")
        addGameVersion mc_version
        relations {
            requiredDependency "fl"
            optionalDependency "jei"
            optionalDependency "patchouli"
        }
    }
    project { // Flux Library
        id = "262385"
        releaseType = "release"
        changelogType = "markdown"
        changelog = file("latest-fl.md")
        addGameVersion mc_version
        mainArtifact(coreJar) {}
        addArtifact coreSourcesJar
    }
}
